diff --git a/src/compiler/spirv/spirv_to_nir.c b/src/compiler/spirv/spirv_to_nir.c
index 71cdc83..f5c1259 100644
--- a/src/compiler/spirv/spirv_to_nir.c
+++ b/src/compiler/spirv/spirv_to_nir.c
@@ -193,7 +193,7 @@ _vtn_fail(struct vtn_builder *b, const char *file, unsigned line,
    if (dump_path)
       vtn_dump_shader(b, dump_path, "fail");
 
-   vtn_longjmp(b->fail_jump, 1);
+   vtn_longjmp((void**)(b->fail_jump), 1);
 }
 
 static struct vtn_ssa_value *
@@ -6187,7 +6187,7 @@ spirv_to_nir(const uint32_t *words, size_t word_count,
       return NULL;
 
    /* See also _vtn_fail() */
-   if (vtn_setjmp(b->fail_jump)) {
+   if (vtn_setjmp((void**)(b->fail_jump))) {
       ralloc_free(b);
       return NULL;
    }
diff --git a/src/compiler/spirv/gl_spirv.c b/src/compiler/spirv/gl_spirv.c
index 5ef3892..9224efe 100644
--- a/src/compiler/spirv/gl_spirv.c
+++ b/src/compiler/spirv/gl_spirv.c
@@ -238,7 +238,7 @@ gl_spirv_validation(const uint32_t *words, size_t word_count,
       return false;
 
    /* See also _vtn_fail() */
-   if (vtn_setjmp(b->fail_jump)) {
+   if (vtn_setjmp((void**)b->fail_jump)) {
       ralloc_free(b);
       return false;
    }
diff --git a/src/mesa/state_tracker/st_glsl_to_tgsi.cpp b/src/mesa/state_tracker/st_glsl_to_tgsi.cpp
index dcbdb09..27ff75c 100644
--- a/src/mesa/state_tracker/st_glsl_to_tgsi.cpp
+++ b/src/mesa/state_tracker/st_glsl_to_tgsi.cpp
@@ -62,7 +62,9 @@
 
 #define MAX_GLSL_TEXTURE_OFFSET 4
 
-#ifndef NDEBUG
+#define WOA32_BROKEN_OUTPUT 0
+
+#if WOA32_BROKEN_OUTPUT // disable output since it breaks on libstdc++ linkage
 #include "util/u_atomic.h"
 #include "util/simple_mtx.h"
 #include <fstream>
@@ -5829,7 +5831,7 @@ glsl_to_tgsi_visitor::renumber_registers(void)
    ralloc_free(first_writes);
 }
 
-#ifndef NDEBUG
+#if WOA32_BROKEN_OUTPUT
 void glsl_to_tgsi_visitor::print_stats()
 {
    int narray_registers = 0;
diff --git a/src/util/os_file.c b/src/util/os_file.c
index 5f79284e..d414f7a8 100644
--- a/src/util/os_file.c
+++ b/src/util/os_file.c
@@ -140,9 +140,15 @@ os_read_file(const char *filename, size_t *size)
    /* Pre-allocate a buffer at least the size of the file if we can read
     * that information.
     */
-   struct stat stat;
-   if (fstat(fd, &stat) == 0)
-      len += stat.st_size;
+   if(sizeof(size_t)>4) {
+      struct __stat64 stat;
+      if (_fstat64(fd, &stat) == 0)
+         len += stat.st_size;
+   } else {
+      struct _stat stat;
+      if (_fstat(fd, &stat) == 0)
+         len += stat.st_size;
+   }
 
    char *buf = malloc(len);
    if (!buf) {
diff --git a/src/compiler/spirv/vtn_opencl.c b/src/compiler/spirv/vtn_opencl.c
index e07669c5..24a5694a 100644
--- a/src/compiler/spirv/vtn_opencl.c
+++ b/src/compiler/spirv/vtn_opencl.c
@@ -125,7 +125,9 @@ vtn_opencl_mangle(const char *in_name,
          break;
       }
       }
-      args_str += sprintf(args_str, "%s", suffix);
+      // CLang optimizes by injecting stpcpy here, which isn't supported by the runtime. Let's confuse him...
+      // args_str += sprintf(args_str, "%s", suffix);
+      { const char * in_str = suffix; do {} while((*args_str++=*in_str++)); }
    }
 
    *outstring = strdup(local_name);
diff --git a/src/compiler/nir/nir.h b/src/compiler/nir/nir.h
index aff12898..a160dea2 100644
--- a/src/compiler/nir/nir.h
+++ b/src/compiler/nir/nir.h
@@ -54,9 +54,9 @@
 
 #include "nir_opcodes.h"
 
-#if defined(_WIN32) && !defined(snprintf)
-#define snprintf _snprintf
-#endif
+//#if defined(_WIN32) && !defined(snprintf)
+//#define snprintf _snprintf
+//#endif
 
 #ifdef __cplusplus
 extern "C" {
diff --git a/src/compiler/nir/nir_lower_atomics_to_ssbo.c b/src/compiler/nir/nir_lower_atomics_to_ssbo.c
index c1799d0b..3a690a81 100644
--- a/src/compiler/nir/nir_lower_atomics_to_ssbo.c
+++ b/src/compiler/nir/nir_lower_atomics_to_ssbo.c
@@ -27,9 +27,9 @@
 #include "nir.h"
 #include "nir_builder.h"
 
-#if defined(_WIN32) && !defined(snprintf)
-#define snprintf _snprintf
-#endif
+//#if defined(_WIN32) && !defined(snprintf)
+//#define snprintf _snprintf
+//#endif
 
 /*
  * Remap atomic counters to SSBOs, starting from the shader's next SSBO slot
