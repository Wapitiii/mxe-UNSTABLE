This file is part of MXE. See LICENSE.md for licensing information.

diff --color -Naur a/CMakeLists.txt b/CMakeLists.txt
--- a/CMakeLists.txt	2024-01-08 03:10:48.649035340 -0500
+++ b/CMakeLists.txt	2024-01-08 03:12:15.989397018 -0500
@@ -146,18 +146,13 @@
 # require proper c++
 #add_definitions( "-Wall -ansi -pedantic" )
 # HDF5 uses long long which is not ansi
-if (WIN32)
-    # lots of warnings with cl.exe right now, use /W1
-    add_definitions("/W1 -D_CRT_SECURE_NO_WARNINGS -D_SCL_SECURE_NO_WARNINGS /bigobj")
-else(WIN32)
-    add_definitions( "-Wall -Wno-unknown-pragmas -Wno-unused-function" )
-endif(WIN32)
+add_definitions( "-Wall -Wno-unknown-pragmas -Wno-unused-function" )
 
 add_subdirectory( cmake )
 add_subdirectory( src )
-add_subdirectory( examples )
-add_subdirectory( test )
-add_subdirectory( doc )
+#add_subdirectory( examples )
+#add_subdirectory( test )
+#add_subdirectory( doc )
 
 
 # CPACK options
diff --color -Naur a/src/cpp/CMakeLists.txt b/src/cpp/CMakeLists.txt
--- a/src/cpp/CMakeLists.txt	2024-01-08 03:10:48.652368687 -0500
+++ b/src/cpp/CMakeLists.txt	2024-01-08 03:12:45.589519589 -0500
@@ -8,58 +8,17 @@
 file(GLOB_RECURSE CPP_SOURCES flann_cpp.cpp)
 file(GLOB_RECURSE CU_SOURCES *.cu)
 
-add_library(flann_cpp_s STATIC ${CPP_SOURCES})
-if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_CLANG)
-    set_target_properties(flann_cpp_s PROPERTIES COMPILE_FLAGS -fPIC)
-endif()
-set_property(TARGET flann_cpp_s PROPERTY COMPILE_DEFINITIONS FLANN_STATIC FLANN_USE_CUDA)
-
-if (BUILD_CUDA_LIB)
-    SET(CUDA_NVCC_FLAGS -DFLANN_USE_CUDA)
-    if(CMAKE_COMPILER_IS_GNUCC)
-		set(CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS};-Xcompiler;-fPIC;-arch=sm_13" )
-        if (NVCC_COMPILER_BINDIR)
-            set(CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS};--compiler-bindir=${NVCC_COMPILER_BINDIR}")
-        endif()
-    else()
-	    set(CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS};-arch=sm_13" )
-    endif()
-    cuda_add_library(flann_cuda_s STATIC ${CU_SOURCES})
-    set_property(TARGET flann_cuda_s PROPERTY COMPILE_DEFINITIONS FLANN_STATIC)
-endif()
-
-if(CMAKE_SYSTEM_NAME STREQUAL "Linux" AND CMAKE_COMPILER_IS_GNUCC)
-    add_library(flann_cpp SHARED "")
-    set_target_properties(flann_cpp PROPERTIES LINKER_LANGUAGE CXX)
-    target_link_libraries(flann_cpp -Wl,-whole-archive flann_cpp_s -Wl,-no-whole-archive)
-
-    if (BUILD_CUDA_LIB)
-	    cuda_add_library(flann_cuda SHARED "")
-        set_target_properties(flann_cuda PROPERTIES LINKER_LANGUAGE CXX)
-        target_link_libraries(flann_cuda -Wl,-whole-archive flann_cuda_s -Wl,-no-whole-archive)
-        set_property(TARGET flann_cpp_s PROPERTY COMPILE_DEFINITIONS FLANN_USE_CUDA)
-    # 	target_link_libraries(flann_cuda cudpp_x86_64)
-    endif()
-else()
-    add_library(flann_cpp SHARED ${CPP_SOURCES})
-    if (BUILD_CUDA_LIB)
-		cuda_add_library(flann_cuda SHARED ${CPP_SOURCES})
-        set_property(TARGET flann_cpp PROPERTY COMPILE_DEFINITIONS FLANN_USE_CUDA)
-    endif()
-endif()
 
-set_target_properties(flann_cpp PROPERTIES
-   VERSION ${FLANN_VERSION}
-   SOVERSION ${FLANN_SOVERSION}
-   DEFINE_SYMBOL FLANN_EXPORTS
-) 
+add_library(flann_cpp ${CPP_SOURCES})
 
-if (BUILD_CUDA_LIB)
-    set_target_properties(flann_cuda PROPERTIES
+if (BUILD_SHARED_LIBS)
+    set_target_properties(flann_cpp PROPERTIES
        VERSION ${FLANN_VERSION}
        SOVERSION ${FLANN_SOVERSION}
        DEFINE_SYMBOL FLANN_EXPORTS
     ) 
+else()
+    set_property(TARGET flann_cpp PROPERTY COMPILE_DEFINITIONS FLANN_STATIC)
 endif()
 
 
@@ -76,60 +35,39 @@
 
 
 if (BUILD_C_BINDINGS)
-    add_library(flann_s STATIC ${C_SOURCES})
-    if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_CLANG)
-        set_target_properties(flann_s PROPERTIES COMPILE_FLAGS -fPIC)
-    endif()
-    set_property(TARGET flann_s PROPERTY COMPILE_DEFINITIONS FLANN_STATIC)
+    add_library(flann ${C_SOURCES})
 
-    if(CMAKE_SYSTEM_NAME STREQUAL "Linux" AND CMAKE_COMPILER_IS_GNUCC)
-        add_library(flann SHARED "")
-        set_target_properties(flann PROPERTIES LINKER_LANGUAGE CXX)
-        target_link_libraries(flann -Wl,-whole-archive flann_s -Wl,-no-whole-archive)
+    if (NOT BUILD_SHARED_LIBS)
+        set_property(TARGET flann PROPERTY COMPILE_DEFINITIONS FLANN_STATIC)
     else()
-        add_library(flann SHARED ${C_SOURCES})
+        set_target_properties(flann PROPERTIES
+           VERSION ${FLANN_VERSION}
+           SOVERSION ${FLANN_SOVERSION}
+           DEFINE_SYMBOL FLANN_EXPORTS
+        ) 
     endif()
-
-    set_target_properties(flann PROPERTIES
-       VERSION ${FLANN_VERSION}
-       SOVERSION ${FLANN_SOVERSION}
-       DEFINE_SYMBOL FLANN_EXPORTS
-    ) 
-endif()
-
-if(WIN32)
-if (BUILD_C_BINDINGS)
-    install (
-        TARGETS flann
-        RUNTIME DESTINATION share/flann/matlab
-    )
 endif()
-endif(WIN32)
-
 
 install (
-    TARGETS flann_cpp flann_cpp_s
+    TARGETS flann_cpp
     RUNTIME DESTINATION bin
     LIBRARY DESTINATION ${FLANN_LIB_INSTALL_DIR}
     ARCHIVE DESTINATION ${FLANN_LIB_INSTALL_DIR}
 )
  
-if (BUILD_CUDA_LIB)
-    install (
-        TARGETS flann_cuda flann_cuda_s
-        RUNTIME DESTINATION bin
-        LIBRARY DESTINATION ${FLANN_LIB_INSTALL_DIR}
-        ARCHIVE DESTINATION ${FLANN_LIB_INSTALL_DIR}
-    )
-endif()
-
 if (BUILD_C_BINDINGS)
     install (
-        TARGETS flann flann_s
+        TARGETS flann
         RUNTIME DESTINATION bin
         LIBRARY DESTINATION ${FLANN_LIB_INSTALL_DIR}
         ARCHIVE DESTINATION ${FLANN_LIB_INSTALL_DIR}
     )
+    if (WIN32 AND BUILD_SHARED_LIBS)
+        install (
+            TARGETS flann
+            RUNTIME DESTINATION share/flann/matlab
+        )
+    endif(WIN32 AND BUILD_SHARED_LIBS)
 endif()
 
 install (
diff --color -Naur a/src/cpp/flann/algorithms/kdtree_index.h b/src/cpp/flann/algorithms/kdtree_index.h
--- a/src/cpp/flann/algorithms/kdtree_index.h	2024-01-08 03:10:48.652368687 -0500
+++ b/src/cpp/flann/algorithms/kdtree_index.h	2024-01-08 03:11:50.682625551 -0500
@@ -36,6 +36,7 @@
 #include <cassert>
 #include <cstring>
 #include <stdarg.h>
+#include <cmath>
 
 #include "flann/general.h"
 #include "flann/algorithms/nn_index.h"
@@ -663,7 +664,7 @@
             ElementType max_span = 0;
             size_t div_feat = 0;
             for (size_t i=0;i<veclen_;++i) {
-                ElementType span = abs(point[i]-leaf_point[i]);
+                ElementType span = std::abs(point[i]-leaf_point[i]);
                 if (span > max_span) {
                     max_span = span;
                     div_feat = i;
diff --color -Naur a/src/cpp/flann/util/serialization.h b/src/cpp/flann/util/serialization.h
--- a/src/cpp/flann/util/serialization.h	2024-01-08 03:10:48.662368728 -0500
+++ b/src/cpp/flann/util/serialization.h	2024-01-08 03:11:50.679292205 -0500
@@ -86,6 +86,7 @@
 BASIC_TYPE_SERIALIZER(unsigned int);
 BASIC_TYPE_SERIALIZER(long);
 BASIC_TYPE_SERIALIZER(unsigned long);
+BASIC_TYPE_SERIALIZER(unsigned long long);
 BASIC_TYPE_SERIALIZER(float);
 BASIC_TYPE_SERIALIZER(double);
 BASIC_TYPE_SERIALIZER(bool);
